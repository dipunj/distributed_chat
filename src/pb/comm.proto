syntax = "proto3";
import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

option go_package = "./pb";

message TextMessage {
  optional string id = 16;
  string sender_name = 2;
  string group_name = 3;
  string content = 5;
  int64 likedBy = 6;
  optional google.protobuf.Timestamp clientSentAt = 17;
  optional google.protobuf.Timestamp serverReceivedAt = 18;
}

message Reaction {
  optional string id = 16;
  string sender_name = 2;
  string group_name = 3;
  string on_message_id = 4; // the message id on which the reaction is done
  string content = 5;       // "like" | "unlike"
  optional google.protobuf.Timestamp clientSentAt = 17;
  optional google.protobuf.Timestamp serverReceivedAt = 18;
}

message GroupDetails {
  bool status = 1;
  repeated string onlineUserNames = 2;
  repeated TextMessage recentMessages = 3;
}

message UserState {
  optional string user_name = 16;
  optional string group_name = 17;
}

message Status { bool status = 1; }
message GroupName { string group_name = 1; }
message GroupHistory { repeated TextMessage messages = 1; }

message ReplicaDetail {
  int32 id = 1;
  string ip_address = 2;
  bool is_online = 3;
}

message VisibilityResponse { repeated ReplicaDetail replicas = 1; }

// this service is used between clients and a server
service Public {

  rpc CreateNewMessage(TextMessage) returns (Status) {}
  rpc UpdateReaction(Reaction) returns (Status) {}

  rpc SwitchUser(UserState) returns (Status) {}
  rpc SwitchGroup(UserState) returns (GroupDetails) {}

  rpc PrintGroupHistory(GroupName) returns (GroupHistory) {}

  rpc Subscribe(google.protobuf.Empty) returns (stream GroupDetails) {}
  rpc VisibleReplicas(google.protobuf.Empty) returns (VisibilityResponse) {}
}

// the following types are used for replication
// they are the same as the above types, but with an additional field
// called clock, which is a vector clock
// the clock length is the number of replicas
// clock[i] is the logical time of replica i for the message. 0-based index.

message Clock { repeated int64 clock = 1; }

message UserStateWithClock {
  string client_id = 1;
  int32 replica_id = 2;
  UserState user_state = 3;
  repeated int64 clock = 19;
}

message ClientIdWithClock {
  string client_id = 1;
  int32 replica_id = 2;
  repeated int64 clock = 3;
}

message TextMessageWithClock {
  string client_id = 1;
  TextMessage text_message = 2;
  repeated int64 clock = 3;
}

message ReactionWithClock {
  string client_id = 1;
  Reaction reaction = 2;
  repeated int64 clock = 3;
}

message DBSchema {
  string id = 1;
  string message_type = 2; // "text" | "reaction"
  string client_id = 3;
  string sender_name = 4;
  string group_name = 5;
  string content = 6;       // "like" | "unlike"
  string parent_msg_id = 7; // the message id on which the reaction is done
  repeated int64 vector_ts = 8;
  google.protobuf.Timestamp client_sent_at = 17;
  google.protobuf.Timestamp server_received_at = 18;
}

message DBMessages { repeated DBSchema messages = 1; }

// this service is used between replicas
service Internal {

  rpc CreateNewMessage(TextMessageWithClock) returns (Status) {}

  rpc UpdateReaction(ReactionWithClock) returns (Status) {}

  rpc SwitchUser(UserStateWithClock) returns (Status) {}

  rpc SwitchGroup(UserStateWithClock) returns (Status) {}

  rpc UserIsOffline(ClientIdWithClock) returns (Status) {}

  rpc SubscribeToHeartBeat(google.protobuf.Empty) returns (stream Status) {}

  // client will call this method to get the latest clock of the server
  rpc GetLatestClock(google.protobuf.Empty) returns (Clock) {}

  // client will call this method to push new messages to the server
  rpc PushDBMessages(DBMessages) returns (Status) {}
}