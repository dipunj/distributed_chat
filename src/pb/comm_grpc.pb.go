// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: comm.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PublicClient is the client API for Public service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PublicClient interface {
	CreateNewMessage(ctx context.Context, in *TextMessage, opts ...grpc.CallOption) (*Status, error)
	UpdateReaction(ctx context.Context, in *Reaction, opts ...grpc.CallOption) (*Status, error)
	SwitchUser(ctx context.Context, in *UserState, opts ...grpc.CallOption) (*Status, error)
	SwitchGroup(ctx context.Context, in *UserState, opts ...grpc.CallOption) (*GroupDetails, error)
	PrintGroupHistory(ctx context.Context, in *GroupName, opts ...grpc.CallOption) (*GroupHistory, error)
	Subscribe(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Public_SubscribeClient, error)
	VisibleReplicas(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*VisibilityResponse, error)
}

type publicClient struct {
	cc grpc.ClientConnInterface
}

func NewPublicClient(cc grpc.ClientConnInterface) PublicClient {
	return &publicClient{cc}
}

func (c *publicClient) CreateNewMessage(ctx context.Context, in *TextMessage, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/Public/CreateNewMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicClient) UpdateReaction(ctx context.Context, in *Reaction, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/Public/UpdateReaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicClient) SwitchUser(ctx context.Context, in *UserState, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/Public/SwitchUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicClient) SwitchGroup(ctx context.Context, in *UserState, opts ...grpc.CallOption) (*GroupDetails, error) {
	out := new(GroupDetails)
	err := c.cc.Invoke(ctx, "/Public/SwitchGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicClient) PrintGroupHistory(ctx context.Context, in *GroupName, opts ...grpc.CallOption) (*GroupHistory, error) {
	out := new(GroupHistory)
	err := c.cc.Invoke(ctx, "/Public/PrintGroupHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicClient) Subscribe(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Public_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &Public_ServiceDesc.Streams[0], "/Public/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &publicSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Public_SubscribeClient interface {
	Recv() (*GroupDetails, error)
	grpc.ClientStream
}

type publicSubscribeClient struct {
	grpc.ClientStream
}

func (x *publicSubscribeClient) Recv() (*GroupDetails, error) {
	m := new(GroupDetails)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *publicClient) VisibleReplicas(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*VisibilityResponse, error) {
	out := new(VisibilityResponse)
	err := c.cc.Invoke(ctx, "/Public/VisibleReplicas", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PublicServer is the server API for Public service.
// All implementations must embed UnimplementedPublicServer
// for forward compatibility
type PublicServer interface {
	CreateNewMessage(context.Context, *TextMessage) (*Status, error)
	UpdateReaction(context.Context, *Reaction) (*Status, error)
	SwitchUser(context.Context, *UserState) (*Status, error)
	SwitchGroup(context.Context, *UserState) (*GroupDetails, error)
	PrintGroupHistory(context.Context, *GroupName) (*GroupHistory, error)
	Subscribe(*emptypb.Empty, Public_SubscribeServer) error
	VisibleReplicas(context.Context, *emptypb.Empty) (*VisibilityResponse, error)
	mustEmbedUnimplementedPublicServer()
}

// UnimplementedPublicServer must be embedded to have forward compatible implementations.
type UnimplementedPublicServer struct {
}

func (UnimplementedPublicServer) CreateNewMessage(context.Context, *TextMessage) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNewMessage not implemented")
}
func (UnimplementedPublicServer) UpdateReaction(context.Context, *Reaction) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReaction not implemented")
}
func (UnimplementedPublicServer) SwitchUser(context.Context, *UserState) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwitchUser not implemented")
}
func (UnimplementedPublicServer) SwitchGroup(context.Context, *UserState) (*GroupDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwitchGroup not implemented")
}
func (UnimplementedPublicServer) PrintGroupHistory(context.Context, *GroupName) (*GroupHistory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrintGroupHistory not implemented")
}
func (UnimplementedPublicServer) Subscribe(*emptypb.Empty, Public_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedPublicServer) VisibleReplicas(context.Context, *emptypb.Empty) (*VisibilityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VisibleReplicas not implemented")
}
func (UnimplementedPublicServer) mustEmbedUnimplementedPublicServer() {}

// UnsafePublicServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PublicServer will
// result in compilation errors.
type UnsafePublicServer interface {
	mustEmbedUnimplementedPublicServer()
}

func RegisterPublicServer(s grpc.ServiceRegistrar, srv PublicServer) {
	s.RegisterService(&Public_ServiceDesc, srv)
}

func _Public_CreateNewMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TextMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServer).CreateNewMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Public/CreateNewMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServer).CreateNewMessage(ctx, req.(*TextMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Public_UpdateReaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Reaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServer).UpdateReaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Public/UpdateReaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServer).UpdateReaction(ctx, req.(*Reaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _Public_SwitchUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserState)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServer).SwitchUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Public/SwitchUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServer).SwitchUser(ctx, req.(*UserState))
	}
	return interceptor(ctx, in, info, handler)
}

func _Public_SwitchGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserState)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServer).SwitchGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Public/SwitchGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServer).SwitchGroup(ctx, req.(*UserState))
	}
	return interceptor(ctx, in, info, handler)
}

func _Public_PrintGroupHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServer).PrintGroupHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Public/PrintGroupHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServer).PrintGroupHistory(ctx, req.(*GroupName))
	}
	return interceptor(ctx, in, info, handler)
}

func _Public_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PublicServer).Subscribe(m, &publicSubscribeServer{stream})
}

type Public_SubscribeServer interface {
	Send(*GroupDetails) error
	grpc.ServerStream
}

type publicSubscribeServer struct {
	grpc.ServerStream
}

func (x *publicSubscribeServer) Send(m *GroupDetails) error {
	return x.ServerStream.SendMsg(m)
}

func _Public_VisibleReplicas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServer).VisibleReplicas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Public/VisibleReplicas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServer).VisibleReplicas(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Public_ServiceDesc is the grpc.ServiceDesc for Public service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Public_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Public",
	HandlerType: (*PublicServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNewMessage",
			Handler:    _Public_CreateNewMessage_Handler,
		},
		{
			MethodName: "UpdateReaction",
			Handler:    _Public_UpdateReaction_Handler,
		},
		{
			MethodName: "SwitchUser",
			Handler:    _Public_SwitchUser_Handler,
		},
		{
			MethodName: "SwitchGroup",
			Handler:    _Public_SwitchGroup_Handler,
		},
		{
			MethodName: "PrintGroupHistory",
			Handler:    _Public_PrintGroupHistory_Handler,
		},
		{
			MethodName: "VisibleReplicas",
			Handler:    _Public_VisibleReplicas_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _Public_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "comm.proto",
}

// InternalClient is the client API for Internal service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InternalClient interface {
	// sync online users to and from other replicas
	SendOnlineUsers(ctx context.Context, in *UserStateWithClock, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// sync messages to and from other replicas
	SendMessages(ctx context.Context, in *TextMessageWithClock, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// sync reactions to and from other replicas
	SendReactions(ctx context.Context, in *ReactionWithClock, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SubscribeToHeartBeat(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Internal_SubscribeToHeartBeatClient, error)
}

type internalClient struct {
	cc grpc.ClientConnInterface
}

func NewInternalClient(cc grpc.ClientConnInterface) InternalClient {
	return &internalClient{cc}
}

func (c *internalClient) SendOnlineUsers(ctx context.Context, in *UserStateWithClock, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/Internal/SendOnlineUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalClient) SendMessages(ctx context.Context, in *TextMessageWithClock, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/Internal/SendMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalClient) SendReactions(ctx context.Context, in *ReactionWithClock, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/Internal/SendReactions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalClient) SubscribeToHeartBeat(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Internal_SubscribeToHeartBeatClient, error) {
	stream, err := c.cc.NewStream(ctx, &Internal_ServiceDesc.Streams[0], "/Internal/SubscribeToHeartBeat", opts...)
	if err != nil {
		return nil, err
	}
	x := &internalSubscribeToHeartBeatClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Internal_SubscribeToHeartBeatClient interface {
	Recv() (*Status, error)
	grpc.ClientStream
}

type internalSubscribeToHeartBeatClient struct {
	grpc.ClientStream
}

func (x *internalSubscribeToHeartBeatClient) Recv() (*Status, error) {
	m := new(Status)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// InternalServer is the server API for Internal service.
// All implementations must embed UnimplementedInternalServer
// for forward compatibility
type InternalServer interface {
	// sync online users to and from other replicas
	SendOnlineUsers(context.Context, *UserStateWithClock) (*emptypb.Empty, error)
	// sync messages to and from other replicas
	SendMessages(context.Context, *TextMessageWithClock) (*emptypb.Empty, error)
	// sync reactions to and from other replicas
	SendReactions(context.Context, *ReactionWithClock) (*emptypb.Empty, error)
	SubscribeToHeartBeat(*emptypb.Empty, Internal_SubscribeToHeartBeatServer) error
	mustEmbedUnimplementedInternalServer()
}

// UnimplementedInternalServer must be embedded to have forward compatible implementations.
type UnimplementedInternalServer struct {
}

func (UnimplementedInternalServer) SendOnlineUsers(context.Context, *UserStateWithClock) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendOnlineUsers not implemented")
}
func (UnimplementedInternalServer) SendMessages(context.Context, *TextMessageWithClock) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessages not implemented")
}
func (UnimplementedInternalServer) SendReactions(context.Context, *ReactionWithClock) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendReactions not implemented")
}
func (UnimplementedInternalServer) SubscribeToHeartBeat(*emptypb.Empty, Internal_SubscribeToHeartBeatServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeToHeartBeat not implemented")
}
func (UnimplementedInternalServer) mustEmbedUnimplementedInternalServer() {}

// UnsafeInternalServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InternalServer will
// result in compilation errors.
type UnsafeInternalServer interface {
	mustEmbedUnimplementedInternalServer()
}

func RegisterInternalServer(s grpc.ServiceRegistrar, srv InternalServer) {
	s.RegisterService(&Internal_ServiceDesc, srv)
}

func _Internal_SendOnlineUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserStateWithClock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServer).SendOnlineUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Internal/SendOnlineUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServer).SendOnlineUsers(ctx, req.(*UserStateWithClock))
	}
	return interceptor(ctx, in, info, handler)
}

func _Internal_SendMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TextMessageWithClock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServer).SendMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Internal/SendMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServer).SendMessages(ctx, req.(*TextMessageWithClock))
	}
	return interceptor(ctx, in, info, handler)
}

func _Internal_SendReactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReactionWithClock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServer).SendReactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Internal/SendReactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServer).SendReactions(ctx, req.(*ReactionWithClock))
	}
	return interceptor(ctx, in, info, handler)
}

func _Internal_SubscribeToHeartBeat_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(InternalServer).SubscribeToHeartBeat(m, &internalSubscribeToHeartBeatServer{stream})
}

type Internal_SubscribeToHeartBeatServer interface {
	Send(*Status) error
	grpc.ServerStream
}

type internalSubscribeToHeartBeatServer struct {
	grpc.ServerStream
}

func (x *internalSubscribeToHeartBeatServer) Send(m *Status) error {
	return x.ServerStream.SendMsg(m)
}

// Internal_ServiceDesc is the grpc.ServiceDesc for Internal service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Internal_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Internal",
	HandlerType: (*InternalServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendOnlineUsers",
			Handler:    _Internal_SendOnlineUsers_Handler,
		},
		{
			MethodName: "SendMessages",
			Handler:    _Internal_SendMessages_Handler,
		},
		{
			MethodName: "SendReactions",
			Handler:    _Internal_SendReactions_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeToHeartBeat",
			Handler:       _Internal_SubscribeToHeartBeat_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "comm.proto",
}
